apply plugin: 'com.android.model.application'

model {

    repositories {
        libs(PrebuiltLibraries) {
            libopus {
                headers.srcDir  "src/main/dependencies/include/"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("src/main/dependencies/libs/${targetPlatform.getName()}/libopus.a")
                }
            }
        }
    }

    android {
        compileSdkVersion = 23
        buildToolsVersion = '23.0.3'

        defaultConfig {
            applicationId = "com.forensic.unipg.silenceaudiorecording"
            minSdkVersion.apiLevel = 17
            targetSdkVersion.apiLevel = 23
        }
        /*
         * native build settings: taking default for almost everything
         */


        buildTypes {
            release {
                minifyEnabled = false
                proguardFiles.add(file('proguard-rules.txt'))
            }
        }
        productFlavors {
            // for detailed abiFilter descriptions, refer to "Supported ABIs" @
            // https://developer.android.com/ndk/guides/abis.html#sa
            create("arm") {
                ndk {
                    //  ldFlags.add("-L${file("src/main/libs/").absolutePath}".toString()+"armeabi")
                    //  ldLibs.add('opus')
                    abiFilters.add("armeabi")
                }
            }
            create("arm7") {
                ndk {
                    //  abiFilters.add("armeabi-v7a")
                    //  ldFlags.add("-L${file("src/main/libs/").absolutePath}".toString()+"armeabi-v7a")
                    ldLibs.add('opus')
                }
            }
            create("arm8") {
                ndk {
                    //  ldFlags.add("-L${file("src/main/libs/").absolutePath}".toString()+"arm64-v8a")
                    //  ldLibs.add('opus')
                    abiFilters.add("arm64-v8a")
                }
            }
            create("x86") {
                ndk {
                    //  ldFlags.add("-L${file("src/main/libs/").absolutePath}".toString()+"x86")
                    //  ldLibs.add('opus')
                    abiFilters.add("x86")
                }
            }
            create("x86-64") {
                ndk {
                    //  ldFlags.add("-L${file("src/main/libs/").absolutePath}".toString()+"x86_64")
                    //   ldLibs.add('opus')
                    abiFilters.add("x86_64")
                }
            }
            create("mips") {
                ndk {
                    //  ldFlags.add("-L${file("src/main/libs/").absolutePath}".toString()+"mips")
                    //  ldLibs.add('opus')
                    abiFilters.add("mips")
                }
            }
            create("mips-64") {
                ndk {
                   // ldFlags.add("-L${file("src/main/libs/ ").absolutePath}".toString()+"mips64")
                   // ldLibs.add('opus')
                    abiFilters.add("mips64")
                }
            }

            // To include all cpu architectures, leaves abiFilters empty
            create("all")
        }

        ndk {
            moduleName = 'SilenceAudioRecordingNative'
            platformVersion = 15
            toolchain = 'clang'
            CFlags.addAll(['-Wall', "-g", "-DHAVE_CONFIG_H"] )
            cppFlags.addAll( ["-pedantic" , "-pthread", "-pedantic" ] )
            cppFlags.add( "-std=c++11" )
            cppFlags.add( "-I${file("src/main/jni").absolutePath}".toString() )
            cppFlags.add( "-I${file("src/main/jni/include").absolutePath}".toString() )
            ldLibs.addAll(['android', 'z', 'log', 'OpenSLES', 'atomic'])
            stl = "gnustl_static"
        }
        sources {
            main {
                jni {
                    dependencies {
                        library "libopus" linkage "static"
                    }
                }
            }
        }

    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.4.0'
}